name: Matarese.BasePlayer.CD-Pipeline

on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest    
    outputs: 
      Version: ${{ steps.get_tag.outputs.tag }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
    - name: Fetch Tags
      run: git fetch --tags
    - name: Get latest tag
      id: get_tag
      run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

    #Build/pack the project
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Build and Pack NuGet package
      run: dotnet pack Matarese.BasePlayer/Matarese.BasePlayer.csproj -p:Version='${{ steps.get_tag.outputs.tag }}' -c Release
    - name: Upload NuGet package to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: nugetPackage
        path: Matarese.BasePlayer/bin/Release/ 
        
  release:
    runs-on: ubuntu-latest    
    needs: build
    
    steps:  
    #Push NuGet package to GitHub packages
    - name: Download nuget package artifact
      uses: actions/download-artifact@v4
      with:
        name: nugetPackage
        path: ./nugetPackage
    - name: Prep packages
      run: dotnet nuget add source --username samuelmatarese --password ${{ secrets.NUGET_PACKAGE_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/samuelmatarese/index.json"
    - name: Push package to GitHub packages 
      run: dotnet nuget push ./nugetPackage/*.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }}  --source "github" --visibility public
    
    #Create release
    - name: Create Release
      if: 1 == 0 #needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.NUGET_PACKAGE_TOKEN }} 
      with:
        tag_name: ${{ needs.build.outputs.Version }}
        release_name: Release ${{ needs.build.outputs.Version }}
    - name: Create Release
      if: 1 == 0 #needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.build.outputs.Version }}
        name: Release ${{ needs.build.outputs.Version }}
        artifacts: "nugetPackage/*"
        token: ${{ secrets.NUGET_PACKAGE_TOKEN }}
